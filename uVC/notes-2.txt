main block:
  pointer to root directory block
    (pointer = 4-char binary address)
  pointer to recovery
  pointer to last block ?
  user info (user hash, salt, etc.)
____________________________________________________________________________________________________________________________________________________
directory block:
  pointer to next sequence block
  name of/pointers to directory blocks
    (name = 255-char string)
  name of/pointer to/length of file blocks
____________________________________________________________________________________________________________________________________________________
file block:
  raw binary data of entire file
____________________________________________________________________________________________________________________________________________________
recovery block:
  pointer to next sequence block
  pointer to/length of file blocks (no name)
____________________________________________________________________________________________________________________________________________________
____________________________________________________________________________________________________________________________________________________

first run:
  request new credentials
    require confirmation?
  create/write to main, system, and recovery blocks

after login:
  read last block address into memory
  read full recovery into memory
  read/apply settings in /sys/config
  read root directory
  navigate to directory set in config (if it is set)

add file:
  get size of file
  check recovery for available space (>= size of file)
    if found {
      use address from recovery
      remove/update record in recovery
    }
    else {
      set address as eof
    }
    write new file info to directory
  while full content to archive

delete file:
  remove file info from directory (write code to reuse chunk later)
    replace "F" with "X" and clear remaining text
  consolidate blocks in recovery
  write new recovery data

open file:
  get file name / size of file (already in memory)
  do {
    copy data from block to tmp location by block size
  } while not fully copied
  launch tmp file

add folder:
  add folder reference
    address = eof
    length = 1 block
  write out new folder data (empty block with 0 next-sequence pointer)
  write out this folder's data
  
delete folder:
  remove folder info from this folder (write code to reuse chunk later)
  add all subfolders and files to recovery
  consolidate blocks in recovery
  
move folder:
  copy folder data to destination
  remove folder info from this folder (write code to reuse chunk later)
    
____________________________________________________________________________________________________________________________________________________
____________________________________________________________________________________________________________________________________________________

/*
 * Contains all methods for reading, writing, and opening files and folders
 */
FileSystem {
  string archive_name
  function encryption_method
  Folder root
  constructor: string archive_name, function encryption_method, string key
}
/*
 * Contains methods for navigation and stores current position in filesystem
 */
FileBrowser {
  FileSystem* fs
  Folder* current_folder
  constructor: FileSystem* fs, Folder* start_folder
  get_path:
  {
    string out
    Folder* tmp = current_folder
    while (tmp)
    {
      out = "/" + tmp->name + out
      tmp = tmp->parent
    }
    return out
  }
  path_down: string name
  {
    if (current_folder->has_folder(name))
      current_folder = current_folder->get_folder(name)
  }
  path_up: string name
  {
    if (current_folder->parent)
      current_folder = current_folder->parent
  }
}
/*
 * Stores information about files
 */
File {
  string name
  uint64 size
  list<uint64> address_list
  constructor: string raw_header
  constructor: string name, uint64 first_address
}
/*
 * Stores information about folders
 */
Folder {
  string name
  list<uint64> address_list
  map<string, Folder> folders
  map<string, File> files
  Folder* parent
  constructor: string raw_header
  constructor: string name, uint64 first_address  
  get_folder: string name
    return folders[name]
  get_file: string name
    return files[name]
}